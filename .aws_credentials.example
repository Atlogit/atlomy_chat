# AMTA Project: AWS Credentials Configuration Guide

# CRITICAL SECURITY NOTICE
# ========================
# 1. NEVER commit real credentials to version control
# 2. Use AWS IAM roles and temporary credentials when possible
# 3. Rotate credentials at least every 90 days
# 4. Apply least-privilege principle for each credential set

# Credential Profile Structure
# ---------------------------
# Supports multiple deployment environments
# Recommended: Use AWS IAM roles and temporary credentials

[default]
# Default profile - use for local development
# Generate temporary credentials with limited scope
aws_access_key_id=DEV_TEMPORARY_ACCESS_KEY
aws_secret_access_key=DEV_TEMPORARY_SECRET_KEY
aws_session_token=OPTIONAL_SESSION_TOKEN
region=us-east-1

[development]
# Development environment credentials
# Minimal permissions, isolated environment
aws_access_key_id=DEVELOPMENT_ACCESS_KEY
aws_secret_access_key=DEVELOPMENT_SECRET_KEY
region=us-east-1

[staging]
# Staging environment credentials
# More restricted than production, enhanced security
aws_access_key_id=STAGING_ACCESS_KEY
aws_secret_access_key=STAGING_SECRET_KEY
region=us-east-1

[production]
# Production environment credentials
# HIGHEST security requirements
# Use AWS IAM roles and temporary credentials
aws_access_key_id=PRODUCTION_ACCESS_KEY
aws_secret_access_key=PRODUCTION_SECRET_KEY
region=us-east-1

# Recommended IAM Policy Template
# Customize based on specific service requirements
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": [
#         "secretsmanager:GetSecretValue",
#         "secretsmanager:DescribeSecret",
#         "bedrock:InvokeModel",
#         "logs:CreateLogGroup",
#         "logs:CreateLogStream",
#         "logs:PutLogEvents"
#       ],
#       "Resource": [
#         "arn:aws:secretsmanager:us-east-1:ACCOUNT_ID:secret:amta-*",
#         "arn:aws:bedrock:us-east-1:ACCOUNT_ID:model/*"
#       ]
#     }
#   ]
# }

# Credential Management Best Practices
# ------------------------------------
# 1. Use AWS IAM Identity Center for centralized access
# 2. Enable Multi-Factor Authentication (MFA)
# 3. Use temporary credentials with limited duration
# 4. Implement automated credential rotation
# 5. Monitor and audit credential usage

# Credential Retrieval Strategies
# ------------------------------
# Preferred Methods (Most Secure to Least Secure):
# 1. AWS IAM Roles (EC2, ECS, Lambda)
# 2. AWS IAM Identity Center
# 3. Temporary STS credentials
# 4. Long-term access keys (AVOID if possible)

# Troubleshooting
# ---------------
# If credentials fail:
# 1. Verify AWS CLI configuration
# 2. Check IAM policy permissions
# 3. Ensure correct region and account
# 4. Regenerate temporary credentials
