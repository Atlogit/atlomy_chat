name: Production Deployment to EC2

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Docker Build and Registry Push"]
    types: [completed]
    branches: [production]

permissions:
  actions: read
  contents: read
  packages: read
  id-token: write

jobs:
  debug-workflow-trigger:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Debug Trigger Event
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          EVENT_CONTEXT: ${{ toJson(github.event) }}
        run: |
          echo "=== Workflow Trigger Debug ==="
          echo "Event name: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "=== Workflow Run Details ==="
            echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
            echo "Workflow Name: ${{ github.event.workflow_run.name }}"
            echo "Head Branch: ${{ github.event.workflow_run.head_branch }}"
            echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          fi
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "=== Workflow Dispatch Details ==="
            echo "Sender: ${{ github.actor }}"
            echo "Ref: ${{ github.ref }}"
          fi
          echo "Repository: ${{ github.repository }}"
          echo "=== Full Event Context ==="
          echo "$EVENT_CONTEXT"

  deploy-to-ec2:
    needs: debug-workflow-trigger
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: production
          fetch-depth: 0

      - name: Verbose Branch Verification
        run: |
          echo "Current Branch: $(git branch --show-current)"
          git branch -a
          git log -1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 botocore awscli

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Retrieve Production Secrets from AWS Secrets Manager
        id: get-secrets
        run: |
          secrets=$(aws secretsmanager get-secret-value --secret-id amta-production-secrets --query SecretString --output text)
          
          redis_url=$(echo $secrets | jq -r '.REDIS_URL')
          bedrock_model_id=$(echo $secrets | jq -r '.BEDROCK_MODEL_ID')
          
          echo "::add-mask::$redis_url"
          echo "::add-mask::$bedrock_model_id"
          
          echo "REDIS_URL=$redis_url" >> $GITHUB_OUTPUT
          echo "BEDROCK_MODEL_ID=$bedrock_model_id" >> $GITHUB_OUTPUT

      - name: Pull latest Docker image from GitHub Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ghcr.io/${{ github.repository }}:production

      - name: Prepare deployment configuration
        env:
          REDIS_URL: ${{ steps.get-secrets.outputs.REDIS_URL }}
          BEDROCK_MODEL_ID: ${{ steps.get-secrets.outputs.BEDROCK_MODEL_ID }}
        run: |
          mkdir -p ./deploy_config
          echo "DEPLOYMENT_MODE=production" > ./deploy_config/deployment.env
          echo "REDIS_URL=$REDIS_URL" >> ./deploy_config/deployment.env
          echo "BEDROCK_MODEL_ID=$BEDROCK_MODEL_ID" >> ./deploy_config/deployment.env
          chmod 600 ./deploy_config/deployment.env

      - name: Run configuration validator
        run: |
          python config_validator.py .env.production
        env:
          DEPLOYMENT_MODE: production
          AWS_DEFAULT_REGION: us-east-1

      - name: Deploy to EC2 via SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          REDIS_URL: ${{ steps.get-secrets.outputs.REDIS_URL }}
          BEDROCK_MODEL_ID: ${{ steps.get-secrets.outputs.BEDROCK_MODEL_ID }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

          # Ensure secure project directory
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << SETUP_EOF
            mkdir -p /home/ec2-user/atlomy_chat
            chmod 750 /home/ec2-user/atlomy_chat
          SETUP_EOF

          # Securely copy deployment files
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key \
              ./deploy_config/deployment.env \
              $EC2_USER@$EC2_HOST:/home/ec2-user/atlomy_chat/.env

          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key \
              docker-compose.yml \
              $EC2_USER@$EC2_HOST:/home/ec2-user/atlomy_chat/docker-compose.yml

          # Enhanced deployment script
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << DEPLOY_EOF
            cd /home/ec2-user/atlomy_chat
            
            # Comprehensive logging
            echo "Deployment started at \$(date)" >> deployment.log
            
            # Secure login to registries
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} >> deployment.log 2>&1
            
            # Pull and deploy
            docker pull ghcr.io/${{ github.repository }}:production >> deployment.log 2>&1
            docker-compose down >> deployment.log 2>&1
            docker-compose up -d >> deployment.log 2>&1
            
            # Enhanced status checks
            docker-compose ps >> deployment.log 2>&1
            
            echo "Deployment completed at \$(date)" >> deployment.log
          DEPLOY_EOF

      - name: Verify Deployment
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << VERIFY_EOF
            cd /home/ec2-user/atlomy_chat
            
            # Comprehensive health verification
            docker-compose ps
            
            # Health check with enhanced timeout and logging
            timeout 60s curl -f http://localhost:8000/health || {
              echo "Critical: Health check failed"
              docker-compose logs --tail=50 >> health_check_failure.log
              exit 1
            }
          VERIFY_EOF
