# GitHub Actions Production Deployment Workflow
name: Production Deployment to EC2

on:
  workflow_run:
    workflows: ["Docker Build and Registry Push"]
    types:
      - completed
    branches:
      - production

jobs:
  deploy-to-ec2:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Pull latest Docker image from GitHub Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ghcr.io/${{ github.repository }}:production

      - name: Prepare deployment configuration
        run: |
          # Create .env file from secrets
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" > .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "BEDROCK_MODEL_ID=${{ secrets.BEDROCK_MODEL_ID }}" >> .env
          echo "DEPLOYMENT_MODE=production" >> .env

      - name: Run configuration validator
        run: python config_validator.py

      - name: Deploy to EC2 via SSH
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Prepare SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key

          # Copy necessary files to EC2
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key .env $EC2_USER@$EC2_HOST:/path/to/project/.env
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key docker-compose.yml $EC2_USER@$EC2_HOST:/path/to/project/docker-compose.yml

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << EOF
            cd /path/to/project
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}:production
            docker-compose down
            docker-compose up -d
          EOF

      - name: Verify Deployment
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # Run health checks on deployed application
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << EOF
            cd /path/to/project
            docker-compose ps
            curl -f http://localhost:8000/health || exit 1
          EOF

      - name: Notify Deployment Status
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: Deployment to EC2 successful
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
