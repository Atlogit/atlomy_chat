name: Docker Build and Registry Push

on:
  push:
    branches:
      - production
    paths:
      # Backend Application
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/docker-deploy.yml'
      - 'app/**'
      - 'config_validator.py'
      - 'alembic/**'
      - 'app/core/**'
      - 'app/models/**'
      - 'app/services/**'
      - 'app/api/**'

      # Next.js Frontend Application
      - 'next-app/package.json'
      - 'next-app/package-lock.json'
      - 'next-app/next.config.js'
      - 'next-app/tsconfig.json'
      - 'next-app/postcss.config.js'
      - 'next-app/tailwind.config.js'
      - 'next-app/src/**'
      - 'next-app/public/**'
      - 'next-app/.babelrc'
      - 'next-app/jest.config.js'

  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force Docker build and push'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  id-token: write
  actions: write

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Retrieve Secrets
        id: get-secrets
        run: |
          secrets=$(aws secretsmanager get-secret-value --secret-id amta-production-secrets --query SecretString --output text)
          
          # secret extraction
          database_url=$(echo "$secrets" | jq -r '.DATABASE_URL')
          postgres_host=$(echo "$secrets" | jq -r '.POSTGRES_HOST')
          postgres_port=$(echo "$secrets" | jq -r '.POSTGRES_PORT')
          postgres_db=$(echo "$secrets" | jq -r '.POSTGRES_DB')
          postgres_user=$(echo "$secrets" | jq -r '.POSTGRES_USER')
          postgres_password=$(echo "$secrets" | jq -r '.POSTGRES_PASSWORD')
          
          redis_url=$(echo "$secrets" | jq -r '.REDIS_URL')
          redis_host=$(echo "$secrets" | jq -r '.REDIS_HOST')
          redis_port=$(echo "$secrets" | jq -r '.REDIS_PORT')
          redis_db=$(echo "$secrets" | jq -r '.REDIS_DB')
          redis_password=$(echo "$secrets" | jq -r '.REDIS_PASSWORD')
          
          bedrock_model_id=$(echo "$secrets" | jq -r '.BEDROCK_MODEL_ID')
          aws_bedrock_region=$(echo "$secrets" | jq -r '.AWS_BEDROCK_REGION')
          
          # Mask sensitive values
          echo "::add-mask::$database_url"
          echo "::add-mask::$postgres_host"
          echo "::add-mask::$postgres_port"
          echo "::add-mask::$postgres_db"
          echo "::add-mask::$postgres_user"
          echo "::add-mask::$postgres_password"
          echo "::add-mask::$redis_url"
          echo "::add-mask::$redis_host"
          echo "::add-mask::$redis_port"
          echo "::add-mask::$redis_db"
          echo "::add-mask::$redis_password"
          
          # Output to GitHub Actions environment
          echo "DATABASE_URL=$database_url" >> $GITHUB_OUTPUT
          echo "POSTGRES_HOST=$postgres_host" >> $GITHUB_OUTPUT
          echo "POSTGRES_PORT=$postgres_port" >> $GITHUB_OUTPUT
          echo "POSTGRES_DB=$postgres_db" >> $GITHUB_OUTPUT
          echo "POSTGRES_USER=$postgres_user" >> $GITHUB_OUTPUT
          echo "POSTGRES_PASSWORD=$postgres_password" >> $GITHUB_OUTPUT
          
          echo "REDIS_URL=$redis_url" >> $GITHUB_OUTPUT
          echo "REDIS_HOST=$redis_host" >> $GITHUB_OUTPUT
          echo "REDIS_PORT=$redis_port" >> $GITHUB_OUTPUT
          echo "REDIS_DB=$redis_db" >> $GITHUB_OUTPUT
          echo "REDIS_PASSWORD=$redis_password" >> $GITHUB_OUTPUT
          
          echo "BEDROCK_MODEL_ID=$bedrock_model_id" >> $GITHUB_OUTPUT
          echo "AWS_BEDROCK_REGION=$aws_bedrock_region" >> $GITHUB_OUTPUT

      - name: Create .env File
        env:
          # Secrets from AWS
          DATABASE_URL: ${{ steps.get-secrets.outputs.DATABASE_URL }}
          POSTGRES_HOST: ${{ steps.get-secrets.outputs.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ steps.get-secrets.outputs.POSTGRES_PORT }}
          POSTGRES_DB: ${{ steps.get-secrets.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ steps.get-secrets.outputs.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ steps.get-secrets.outputs.POSTGRES_PASSWORD }}
          
          REDIS_URL: ${{ steps.get-secrets.outputs.REDIS_URL }}
          REDIS_HOST: ${{ steps.get-secrets.outputs.REDIS_HOST }}
          REDIS_PORT: ${{ steps.get-secrets.outputs.REDIS_PORT }}
          REDIS_DB: ${{ steps.get-secrets.outputs.REDIS_DB }}
          REDIS_PASSWORD: ${{ steps.get-secrets.outputs.REDIS_PASSWORD }}
          
          BEDROCK_MODEL_ID: ${{ steps.get-secrets.outputs.BEDROCK_MODEL_ID }}
          AWS_BEDROCK_REGION: ${{ steps.get-secrets.outputs.AWS_BEDROCK_REGION }}
        run: |
          # Start with .env.example as base configuration
          cp .env.example .env
          
          # Override .env with secret values, preserving other parameters
          sed -i "s|^DATABASE_URL=.*|DATABASE_URL=$DATABASE_URL|" .env
          sed -i "s|^POSTGRES_HOST=.*|POSTGRES_HOST=$POSTGRES_HOST|" .env
          sed -i "s|^POSTGRES_PORT=.*|POSTGRES_PORT=$POSTGRES_PORT|" .env
          sed -i "s|^POSTGRES_DB=.*|POSTGRES_DB=$POSTGRES_DB|" .env
          sed -i "s|^POSTGRES_USER=.*|POSTGRES_USER=$POSTGRES_USER|" .env
          sed -i "s|^POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=$POSTGRES_PASSWORD|" .env
          
          sed -i "s|^REDIS_URL=.*|REDIS_URL=$REDIS_URL|" .env
          sed -i "s|^REDIS_HOST=.*|REDIS_HOST=$REDIS_HOST|" .env
          sed -i "s|^REDIS_PORT=.*|REDIS_PORT=$REDIS_PORT|" .env
          sed -i "s|^REDIS_DB=.*|REDIS_DB=$REDIS_DB|" .env
          sed -i "s|^REDIS_PASSWORD=.*|REDIS_PASSWORD=$REDIS_PASSWORD|" .env
          
          sed -i "s|^BEDROCK_MODEL_ID=.*|BEDROCK_MODEL_ID=$BEDROCK_MODEL_ID|" .env
          sed -i "s|^AWS_BEDROCK_REGION=.*|AWS_BEDROCK_REGION=$AWS_BEDROCK_REGION|" .env

          # Additional Fixed Configuration
          echo "AWS_REGION=us-east-1" >> .env
          echo "SERVER_HOST=0.0.0.0" >> .env
          echo "SERVER_PORT=8081" >> .env
          
          # Set deployment mode to production
          sed -i "s|^DEPLOYMENT_MODE=.*|DEPLOYMENT_MODE=production|" .env
          
          # Secure .env file permissions
          chmod 600 .env

          if [ ! -f .env ]; then
            cp .env.example .env
            echo "Created .env file from .env.example"
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
  
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.0'
  
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 botocore awscli

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend Image Build and Push
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=production
            type=sha,prefix=production-backend-

      - name: Build and test backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          load: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}

      # Frontend Image Build and Push
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=raw,value=production
            type=sha,prefix=production-frontend-

      - name: Build and test frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./next-app
          file: ./next-app/Dockerfile
          load: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}

      # Configuration Validation
      - name: Run configuration validator
        run: |
          python config_validator.py .env.production
        env:
          DEPLOYMENT_MODE: production
          AWS_DEFAULT_REGION: us-east-1

      # Push Images
      - name: Push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}

      - name: Push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./next-app
          file: ./next-app/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}

      # Trigger Production Deployment
      - name: Trigger Next Workflow with PAT
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $PAT" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Atlogit/atlomy_chat/actions/workflows/production-deploy.yml/dispatches \
            -d '{"ref":"production"}'