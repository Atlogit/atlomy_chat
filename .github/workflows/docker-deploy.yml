name: Docker Build and Registry Push

on:
  push:
    branches:
      - production
    paths:
      # Backend Application
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/docker-deploy.yml'
      - 'app/**'
      - 'config_validator.py'
      - 'alembic/**'
      - 'app/core/**'
      - 'app/models/**'
      - 'app/services/**'
      - 'app/api/**'

      # Next.js Frontend Application
      - 'next-app/package.json'
      - 'next-app/package-lock.json'
      - 'next-app/next.config.js'
      - 'next-app/tsconfig.json'
      - 'next-app/postcss.config.js'
      - 'next-app/tailwind.config.js'
      - 'next-app/src/**'
      - 'next-app/public/**'
      - 'next-app/.babelrc'
      - 'next-app/jest.config.js'

  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force Docker build and push'
        required: false
        type: boolean
        default: false

# Comprehensive permissions for GitHub Actions workflow
permissions:
  contents: read
  packages: write
  id-token: write
  actions: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  debug-branch-context:
    runs-on: ubuntu-latest
    steps:
      - name: Detailed Branch Context Debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "Branch Debug Information:"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Head Ref: ${{ github.head_ref }}"
          echo "Triggering Branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Workflow Name: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Full GitHub Context:"
          echo "$GITHUB_CONTEXT"

  build-and-push:
    needs: debug-branch-context
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production

      - name: Verbose File System Debug
        run: |
          pwd
          echo "=== Repository Root Contents ==="
          ls -la
          echo "=== Dockerfile Contents ==="
          cat Dockerfile || echo "Dockerfile not found"
          echo "=== Full Directory Tree ==="
          find . -type f | sort

      - name: Verify Dockerfile Presence
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Critical Error: Dockerfile is missing!"
            exit 1
          fi
          echo "Dockerfile verified successfully"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 botocore awscli

      - name: Create .env file
        run: |
          if [ ! -f .env ]; then
            cp .env.example .env
            echo "Created .env file from .env.example"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=production
            type=sha,prefix=production-

      - name: Build and test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start services
        run: docker-compose up -d

      - name: Run configuration validator
        run: |
          python config_validator.py .env.production
        env:
          DEPLOYMENT_MODE: production
          AWS_DEFAULT_REGION: us-east-1

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Stop services
        run: docker-compose down

      - name: Trigger Next Workflow with PAT
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $PAT" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Atlogit/atlomy_chat/actions/workflows/production-deploy.yml/dispatches \
            -d '{"ref":"production"}'
