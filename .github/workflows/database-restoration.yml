name: Database Restoration Workflow

on:
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode (development/production)'
        required: false
        default: 'production'
      force_restore:
        description: 'Force database restoration'
        type: boolean
        default: false
  workflow_call:
    inputs:
      deployment_mode:
        description: 'Deployment mode (development/production)'
        type: string
        required: false
        default: 'production'
      force_restore:
        description: 'Force database restoration'
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

jobs:
  pre-restore-checks:
    runs-on: ubuntu-latest
    outputs:
      should_restore: ${{ steps.check-conditions.outputs.should_restore }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Restoration Conditions
        id: check-conditions
        env:
          FORCE_RESTORE: ${{ inputs.force_restore || github.event.inputs.force_restore }}
          DEPLOYMENT_MODE: ${{ inputs.deployment_mode || github.event.inputs.deployment_mode || 'production' }}
        run: |
          echo "Deployment Mode: $DEPLOYMENT_MODE"
          echo "Force Restore: $FORCE_RESTORE"
          
          if [[ "$FORCE_RESTORE" == "true" ]]; then
            echo "should_restore=true" >> $GITHUB_OUTPUT
          else
            # Default logic - you can replace with more sophisticated checks
            echo "should_restore=true" >> $GITHUB_OUTPUT
          fi

  database-restoration:
    needs: pre-restore-checks
    if: needs.pre-restore-checks.outputs.should_restore == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 psycopg2-binary

      - name: Restore Database from S3
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
          DEPLOYMENT_MODE: ${{ inputs.deployment_mode || github.event.inputs.deployment_mode || 'production' }}
        run: |
          chmod +x scripts/restore_database_from_s3.py
          python3 scripts/restore_database_from_s3.py

  notify-status:
    if: always()
    needs: [pre-restore-checks, database-restoration]
    runs-on: ubuntu-latest
    steps:
      - name: Determine Workflow Status
        run: |
          if [[ "${{ needs.database-restoration.result }}" == "success" ]]; then
            echo "✅ Database backup staging completed successfully"
          else
            echo "❌ Database backup staging failed"
            exit 1
          fi
