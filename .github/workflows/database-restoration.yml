name: Database Restoration Workflow

on:
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode (development/production)'
        required: false
        default: 'production'
      force_restore:
        description: 'Force database restoration'
        type: boolean
        default: false
  workflow_call:
    inputs:
      deployment_mode:
        description: 'Deployment mode (development/production)'
        type: string
        required: false
        default: 'production'
      force_restore:
        description: 'Force database restoration'
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

jobs:
  pre-restore-checks:
    runs-on: ubuntu-latest
    outputs:
      should_restore: ${{ steps.check-conditions.outputs.should_restore }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Restoration Conditions
        id: check-conditions
        env:
          FORCE_RESTORE: ${{ inputs.force_restore || github.event.inputs.force_restore }}
          DEPLOYMENT_MODE: ${{ inputs.deployment_mode || github.event.inputs.deployment_mode || 'production' }}
        run: |
          echo "üîç Analyzing Restoration Conditions"
          echo "Deployment Mode: $DEPLOYMENT_MODE"
          echo "Force Restore: $FORCE_RESTORE"
          
          if [[ "$FORCE_RESTORE" == "true" ]]; then
            echo "‚úÖ Force restore enabled"
            echo "should_restore=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Standard restoration conditions met"
            echo "should_restore=true" >> $GITHUB_OUTPUT
          fi

  database-restoration:
    needs: pre-restore-checks
    if: needs.pre-restore-checks.outputs.should_restore == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Prepare SSH Key
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "üîê Preparing SSH Key"
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          echo "‚úÖ SSH Key prepared successfully"

      - name: Validate S3 Bucket and Find Latest Backup
        id: find-backup
        env:
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        run: |
          echo "üîç Validating S3 Bucket: $S3_BACKUP_BUCKET"
          if ! aws s3 ls "s3://$S3_BACKUP_BUCKET" &> /dev/null; then
            echo "‚ùå Error: S3 bucket $S3_BACKUP_BUCKET does not exist or is inaccessible"
            exit 1
          fi

          echo "üìã Discovering Latest Backup"
          latest_backup=$(aws s3 ls "s3://$S3_BACKUP_BUCKET/amta-db/" | grep '.tar.gz' | sort | tail -n 1 | awk '{print $4}')
          
          if [ -z "$latest_backup" ]; then
            echo "‚ùå Error: No backup files found in S3 bucket"
            exit 1
          fi

          echo "üè∑Ô∏è Latest Backup: $latest_backup"
          echo "backup_file=$latest_backup" >> $GITHUB_OUTPUT

      - name: Download and Validate Backup
        id: download-backup
        env:
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
          BACKUP_FILE: ${{ steps.find-backup.outputs.backup_file }}
        run: |
          echo "‚¨áÔ∏è Downloading Backup: $BACKUP_FILE"
          aws s3 cp "s3://$S3_BACKUP_BUCKET/amta-db/$BACKUP_FILE" ./latest_backup.tar.gz

          if [ ! -f ./latest_backup.tar.gz ]; then
            echo "‚ùå Error: Backup download failed"
            exit 1
          fi

          backup_size=$(du -h ./latest_backup.tar.gz | cut -f1)
          backup_checksum=$(sha256sum ./latest_backup.tar.gz | awk '{print $1}')

          echo "üì¶ Backup Size: $backup_size"
          echo "üî¢ Backup Checksum: $backup_checksum"

          echo "backup_size=$backup_size" >> $GITHUB_OUTPUT
          echo "backup_checksum=$backup_checksum" >> $GITHUB_OUTPUT

      - name: Transfer Backup to EC2
        env:
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
          BACKUP_FILE: ${{ steps.find-backup.outputs.backup_file }}
          BACKUP_SIZE: ${{ steps.download-backup.outputs.backup_size }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "üöÄ Transferring Backup to EC2"
          echo "üìç Destination: $EC2_USER@$EC2_HOST"
          echo "üì¶ Backup Size: $BACKUP_SIZE"

          SSH_OPTS="-o BatchMode=yes -o StrictHostKeyChecking=no -v"

          # Ensure remote backup directory exists
          ssh $SSH_OPTS -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST "mkdir -p /opt/atlomy/database_backups"

          # Transfer backup with verbose output
          scp -v $SSH_OPTS -i ~/.ssh/ec2_key \
              ./latest_backup.tar.gz \
              $EC2_USER@$EC2_HOST:/opt/atlomy/database_backups/latest_backup.tar.gz

          echo "‚úÖ Backup transfer completed"

      - name: Prepare and Extract Backup
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          BACKUP_CHECKSUM: ${{ steps.download-backup.outputs.backup_checksum }}
        run: |
          echo "üîß Preparing PostgreSQL Directory and Extracting Backup"
          SSH_OPTS="-o BatchMode=yes -o StrictHostKeyChecking=no"
          
          ssh $SSH_OPTS -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << EOF
            echo "üìÇ Creating PostgreSQL Data Directory"
            sudo mkdir -p /var/lib/postgresql/data
            sudo chown -R 999:999 /var/lib/postgresql/data
            sudo chmod 700 /var/lib/postgresql/data

            echo "üì¶ Extracting Backup"
            sudo tar -xzvf /opt/atlomy/database_backups/latest_backup.tar.gz -C /var/lib/postgresql/data

            echo "üîç Verifying Extracted Files"
            extracted_files=\$(sudo find /var/lib/postgresql/data -type f | wc -l)
            echo "üìÑ Total Extracted Files: \$extracted_files"

            echo "üîí Setting Correct Permissions"
            sudo chown -R 999:999 /var/lib/postgresql/data
            sudo chmod -R 700 /var/lib/postgresql/data

            echo "‚úÖ Backup Extraction and Preparation Complete"
          EOF

  notify-status:
    if: always()
    needs: [pre-restore-checks, database-restoration]
    runs-on: ubuntu-latest
    steps:
      - name: Determine Workflow Status
        run: |
          if [[ "${{ needs.database-restoration.result }}" == "success" ]]; then
            echo "‚úÖ Database Backup Staging Completed Successfully"
          else
            echo "‚ùå Database Backup Staging Failed"
            exit 1
          fi
