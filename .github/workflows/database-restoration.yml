name: Database Restoration Workflow

on:
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode (development/production)'
        required: false
        default: 'production'
      force_restore:
        description: 'Force database restoration'
        type: boolean
        default: false
  workflow_call:
    inputs:
      deployment_mode:
        description: 'Deployment mode (development/production)'
        type: string
        required: false
        default: 'production'
      force_restore:
        description: 'Force database restoration'
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

jobs:
  pre-restore-checks:
    runs-on: ubuntu-latest
    outputs:
      should_restore: ${{ steps.check-conditions.outputs.should_restore }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Restoration Conditions
        id: check-conditions
        env:
          FORCE_RESTORE: ${{ inputs.force_restore || github.event.inputs.force_restore }}
          DEPLOYMENT_MODE: ${{ inputs.deployment_mode || github.event.inputs.deployment_mode || 'production' }}
        run: |
          echo "Deployment Mode: $DEPLOYMENT_MODE"
          echo "Force Restore: $FORCE_RESTORE"
          
          if [[ "$FORCE_RESTORE" == "true" ]]; then
            echo "should_restore=true" >> $GITHUB_OUTPUT
          else
            # Default logic - you can replace with more sophisticated checks
            echo "should_restore=true" >> $GITHUB_OUTPUT
          fi

  database-restoration:
    needs: pre-restore-checks
    if: needs.pre-restore-checks.outputs.should_restore == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 psycopg2-binary

      - name: Prepare SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key

      - name: Find Latest Database Backup
        id: find-backup
        env:
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        run: |
          latest_backup=$(aws s3 ls s3://$S3_BACKUP_BUCKET/amta-db/ | grep '.tar.gz' | sort | tail -n 1 | awk '{print $4}')
          echo "Latest backup: $latest_backup"
          echo "backup_file=$latest_backup" >> $GITHUB_OUTPUT

      - name: Validate and Download Database Backup
        id: download-backup
        env:
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
          BACKUP_FILE: ${{ steps.find-backup.outputs.backup_file }}
        run: |
          # Download backup
          aws s3 cp s3://$S3_BACKUP_BUCKET/amta-db/$BACKUP_FILE ./latest_backup.tar.gz
          
          # Get file details
          backup_size=$(du -h ./latest_backup.tar.gz | cut -f1)
          backup_checksum=$(sha256sum ./latest_backup.tar.gz | awk '{print $1}')
          
          echo "Backup File: $BACKUP_FILE"
          echo "Backup Size: $backup_size"
          echo "Backup SHA256 Checksum: $backup_checksum"
          
          echo "backup_size=$backup_size" >> $GITHUB_OUTPUT
          echo "backup_checksum=$backup_checksum" >> $GITHUB_OUTPUT

      - name: Transfer Backup to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          BACKUP_SIZE: ${{ steps.download-backup.outputs.backup_size }}
        run: |
          echo "Transferring backup file (Size: $BACKUP_SIZE) to EC2 instance..."
          scp -v -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key \
            ./latest_backup.tar.gz \
            $EC2_USER@$EC2_HOST:/opt/atlomy/database_backups/latest_backup.tar.gz

      - name: Verify Backup Transfer and Extract
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          BACKUP_CHECKSUM: ${{ steps.download-backup.outputs.backup_checksum }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            
            BACKUP_DIR="/opt/atlomy/database_backups"
            BACKUP_FILE="$BACKUP_DIR/latest_backup.tar.gz"
            PG_DATA_DIR="/var/lib/postgresql/data"
            
            # Validate backup file exists
            if [ ! -f "$BACKUP_FILE" ]; then
              echo "Error: Backup file not found"
              exit 1
            fi
            
            # Log backup file details
            echo "Backup File: $BACKUP_FILE"
            echo "Backup Size: $(du -h "$BACKUP_FILE" | cut -f1)"
            echo "Backup Checksum: $(sha256sum "$BACKUP_FILE" | awk '{print $1}')"
            
            # Prepare PostgreSQL data directory
            sudo mkdir -p "$PG_DATA_DIR"
            sudo chown postgres:postgres "$PG_DATA_DIR"
            
            # Extract backup with verbose output
            echo "Starting backup extraction..."
            sudo tar -xzvf "$BACKUP_FILE" -C "$PG_DATA_DIR"
            
            # Set correct permissions
            echo "Setting permissions for PostgreSQL data directory..."
            sudo chown -R postgres:postgres "$PG_DATA_DIR"
            
            # Verify extraction
            echo "Verifying extracted files..."
            sudo ls -lR "$PG_DATA_DIR"
            
            echo "Database restoration completed successfully"
          EOF

  notify-status:
    if: always()
    needs: [pre-restore-checks, database-restoration]
    runs-on: ubuntu-latest
    steps:
      - name: Determine Workflow Status
        run: |
          if [[ "${{ needs.database-restoration.result }}" == "success" ]]; then
            echo "✅ Database backup staging completed successfully"
          else
            echo "❌ Database backup staging failed"
            exit 1
          fi
