# GitHub Actions Continuous Integration Workflow
name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop, production ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety python-dotenv
    
    - name: Lint with flake8
      run: flake8 app/ tests/
    
    - name: Check formatting with black
      run: black --check app/ tests/
    
    - name: Type check with mypy
      run: mypy app/
    
    - name: Security scan with Bandit
      run: bandit -r app/
    
    - name: Check dependencies
      run: safety check

  test:
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_amta
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install .
        pip install pytest pytest-asyncio python-dotenv
    
    - name: Create .env file
      run: |
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
    
    - name: Run configuration validator
      run: python config_validator.py
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost/test_amta
        REDIS_HOST: localhost
        AWS_BEDROCK_REGION: us-east-1
        AWS_BEDROCK_MODEL_ID: test-model
    
    - name: Run tests
      run: pytest tests/
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost/test_amta
        REDIS_HOST: localhost
        AWS_BEDROCK_REGION: us-east-1
        AWS_BEDROCK_MODEL_ID: test-model

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: next-app

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: next-app/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint
    
    - name: Type check
      run: npm run type-check
    
    - name: Run tests
      run: npm test
